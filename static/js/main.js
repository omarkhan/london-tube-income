// Generated by CoffeeScript 1.7.1
(function() {
  var g, generateLine, getElementCentre, getx, gety, h, lines, map, mapContent, margin, pathTween, range, removeGraph, render, tooltip, w, x, y;

  range = 1700;

  w = 2673.8766;

  h = 1885.32;

  margin = 110;

  x = d3.scale.linear().range([0 + margin, w - margin]);

  y = d3.scale.linear().domain([0, range]).range([0 + margin, h - margin]);

  getx = function(d, i) {
    return x(i);
  };

  gety = function(d) {
    return h - y(d.income);
  };

  getElementCentre = function(el) {
    var rect;
    rect = el.getBoundingClientRect();
    return {
      left: document.body.scrollLeft + rect.left + (rect.width / 2),
      top: document.body.scrollTop + rect.top + (rect.height / 2)
    };
  };

  generateLine = d3.svg.line().x(getx).y(gety).interpolate('cardinal');

  pathTween = function(path, precision) {
    return function() {
      var distances, dt, i, len0, len1, path0, path1, points;
      path0 = this;
      path1 = path0.cloneNode();
      path1.setAttribute('d', path);
      len0 = path0.getTotalLength();
      len1 = path1.getTotalLength();
      dt = precision / Math.max(len0, len1);
      distances = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 1; i = _i += dt) {
          _results.push(i);
        }
        return _results;
      })();
      points = distances.map(function(t) {
        var p0, p1;
        p0 = path0.getPointAtLength(t * len0);
        p1 = path1.getPointAtLength(t * len1);
        return d3.interpolate([p0.x, p0.y], [p1.x, p1.y]);
      });
      return function(t) {
        if (t < 1) {
          return 'M' + points.map(function(p) {
            return p(t);
          }).join('L');
        }
        return path;
      };
    };
  };

  map = d3.select('#map');

  mapContent = d3.select('#map-content');

  g = map.append('g').attr('class', 'graph');

  tooltip = d3.select('#tooltip');

  g.append('line').attr('x1', x(0)).attr('y1', h - y(0)).attr('x2', x(range)).attr('y2', h - y(0));

  g.append('line').attr('x1', x(0)).attr('y1', h - y(0)).attr('x2', x(0)).attr('y2', h - y(range));

  g.selectAll('.y-label').data(y.ticks(4)).enter().append('text').attr('class', 'y-label').text(function(d) {
    return d.toString();
  }).attr('x', x(0) - 30).attr('y', function(d) {
    return h - y(d);
  }).attr('dy', 15);

  g.selectAll('y-tick').data(y.ticks(4)).enter().append('line').attr('class', 'y-tick').attr('x1', x(0)).attr('y1', function(d) {
    return h - y(d);
  }).attr('x2', x(0) - 12).attr('y2', function(d) {
    return h - y(d);
  });

  removeGraph = function() {
    g.selectAll('path, circle').transition().duration(500).style('opacity', 0).transition().remove();
    return tooltip.style('visibility', null);
  };

  render = function(lineId, stations) {
    var original, path;
    removeGraph();
    x.domain([0, stations.length - 1]);
    g.selectAll('.x-tick').remove();
    g.selectAll('.x-tick').data(stations).enter().append('line').attr('class', 'x-tick').attr('x1', function(d, i) {
      return x(i);
    }).attr('y1', h - y(0)).attr('x2', function(d, i) {
      return x(i);
    }).attr('y2', h - y(0) + 12);
    g.selectAll('.x-label').remove();
    g.selectAll('.x-label').data(stations).enter().append('text').attr('class', 'x-label').text(function(d) {
      return d.name;
    }).attr('x', function(d, i) {
      return x(i);
    }).attr('y', h - y(0) + 30).attr('transform', function(d, i) {
      return "rotate(-80, " + (x(i) + 12) + ", " + (h - y(0) + 30) + ")";
    });
    mapContent.classed('fade', true);
    original = map.select("#" + lineId + " path.main");
    path = g.append('path').attr({
      d: original.attr('d'),
      style: original.attr('style')
    });
    return path.transition().duration(1000).attrTween('d', pathTween(generateLine(stations), 10)).each('end', function() {
      return g.selectAll('circle').data(stations).enter().append('circle').style('opacity', 0).attr('r', 14).attr('cx', getx).attr('cy', gety).on('mouseenter', function(d) {
        var position, rect;
        tooltip.select('.station-name').text(d.name);
        tooltip.select('.station-income-amount').text(d.income);
        rect = tooltip.node().getBoundingClientRect();
        position = getElementCentre(this);
        position.left -= rect.width / 2;
        position.top -= rect.height + 30;
        tooltip.style({
          left: "" + position.left + "px",
          top: "" + position.top + "px"
        });
        return tooltip.style('visibility', 'visible');
      }).transition().duration(500).style('opacity', 1);
    });
  };

  lines = d3.select('#lines');

  lines.selectAll('.line').data(DATA.lines).each(function(_arg) {
    var branches, id, line, name;
    name = _arg.name, id = _arg.id, branches = _arg.branches;
    line = d3.select(this);
    line.on('click', function() {
      var branch;
      if (line.classed('selected')) {
        line.classed('selected', false);
        removeGraph();
        return mapContent.classed('fade', false);
      } else {
        lines.select('.line.selected').classed('selected', false);
        line.classed('selected', true);
        branch = line.selectAll('.branch');
        return branch.on('click').call(branch.node(), branches[0]);
      }
    });
    return line.selectAll('.branch').data(branches).on('click', function(_arg1) {
      var stations;
      stations = _arg1.stations;
      d3.event.stopPropagation();
      lines.selectAll('.branch.selected').classed('selected', false);
      this.classList.add('selected');
      return render(id, stations);
    });
  });

}).call(this);
